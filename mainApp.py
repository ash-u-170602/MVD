# -*- coding: utf-8 -*-
"""Test_audio_classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1azBhbqV1H_UdBMyc11LD4_ainNWZzweh
"""

# import all the dependencies
import tensorflow as tf
import numpy as np
import librosa
from librosa.util import fix_length
import scipy as sp
# !pip install spafe==0.2.0
import spafe # make sure that the version of spafe installed is spafe==0.2.0
from scipy.stats import kurtosis,skew,mode,gstd,describe,iqr,gmean,hmean,median_abs_deviation,variation,tstd,gstd,moment,entropy
from spafe.features.gfcc import gfcc
from sklearn.preprocessing import normalize

model=tf.keras.models.load_model('C:/Users/mohda/AndroidStudioProjects/MVDMovingVehicleDetector/app/src/main/python/acoustic_classifier_mvd') # insert path of trained model here

path='C:/Users/mohda/Desktop/Python/Recording_1465 (1).wav'  #Insert path of audio fetched from the app

def main(path_wav):
  y, sr = librosa.load(path_wav)
  required_audio_size = 3
  padded_signal = fix_length(y, size=required_audio_size*sr)

  # code for matrix
  Matrix  = gfcc(sig=padded_signal, fs=sr, num_ceps=40,nfilts=128,nfft=2048,win_hop=0.0232,win_len=0.0464)
  Matrix=np.reshape(Matrix,[1,128,40])

  # code for vector
  ft=sp.fft.fft(y)
  magnitude=np.absolute(ft)
  hist=magnitude[0:11025]
  k=kurtosis(hist)
  s=skew(hist)
  mean=np.mean(hist)
  z=np.array(mode(hist)[0])
  mode_var=float(z)
  i=iqr(hist)
  g=gmean(hist)
  h=hmean(hist)
  dev=median_abs_deviation(hist)
  var=variation(hist)
  variance=np.var(hist)
  std=tstd(hist)
  gstd_var=gstd(hist)
  ent= entropy(hist)


  features=[mode_var,k,s,mean,i,g,h,dev,var,variance,std,gstd_var,ent]
  vector=np.array(features)
  vector=normalize([vector])
  vector=np.reshape(vector,[1,13])

  # code for prediction

  predict=model.predict([vector,Matrix])
  predict1=(predict > 0.5).astype("int32")
  confidence=predict

  if predict1[0][0]==1:
    return f"It is a car \nProbability: {confidence[0][0]*100}%"
  elif predict1[0][1]==1:
    return f"It is a motorbike \nProbability: {confidence[0][1]*100}%"
  elif predict1[0][3]==1:
    return f"It is a truck \nProbability: {confidence[0][3]*100}%"
  else:
    return "There is no vehicle in the audio"

text = main(path)
print(text)

# text = main(path)
# print(text)

# {'C': 0, 'M': 1, 'N': 2, 'T': 3}